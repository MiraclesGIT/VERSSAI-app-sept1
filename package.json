{
  "name": "verssai-development-safety",
  "version": "2.1.0",
  "description": "VERSSAI VC Intelligence Platform with Enhanced Development Safety",
  "main": "index.js",
  "directories": {
    "test": "tests",
    "backend": "backend",
    "frontend": "frontend"
  },
  "scripts": {
    "dev": "concurrently \"npm run backend:dev\" \"npm run frontend:dev\" \"npm run safety:monitor\"",
    "build": "npm run frontend:build && npm run backend:build",
    "start": "npm run backend:start",
    "frontend:dev": "cd frontend && npm start",
    "frontend:build": "cd frontend && npm run build",
    "frontend:test": "cd frontend && npm test",
    "frontend:install": "cd frontend && npm install",
    "backend:dev": "cd backend && python -m uvicorn enhanced_server:app --reload --port 8080",
    "backend:start": "cd backend && python -m uvicorn enhanced_server:app --port 8080",
    "backend:build": "cd backend && python -m pip install -r requirements.txt",
    "backend:test": "cd backend && python -m pytest",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:rebuild": "docker-compose down && docker-compose build && docker-compose up -d",
    "docker:logs": "docker-compose logs -f",
    "docker:ps": "docker-compose ps",
    "safety:init": "./enhanced-version-manager.sh init",
    "safety:status": "./enhanced-version-manager.sh status",
    "safety:env-status": "./enhanced-version-manager.sh env-status",
    "safe:feature": "./enhanced-version-manager.sh feature",
    "safe:commit": "./enhanced-version-manager.sh commit",
    "safe:deploy": "./enhanced-version-manager.sh deploy",
    "backup:create": "./enhanced-version-manager.sh backup",
    "backup:list": "./enhanced-version-manager.sh list",
    "backup:cleanup": "./enhanced-version-manager.sh cleanup",
    "backup:auto-start": "./auto-backup.sh start",
    "backup:auto-stop": "./auto-backup.sh stop",
    "backup:auto-status": "./auto-backup.sh status",
    "backup:auto-restart": "./auto-backup.sh restart",
    "env:dev": "./enhanced-version-manager.sh deploy development",
    "env:staging": "./enhanced-version-manager.sh deploy staging",
    "env:prod": "./enhanced-version-manager.sh deploy production",
    "env:switch-dev": "git checkout env/development",
    "env:switch-staging": "git checkout env/staging",
    "env:switch-prod": "git checkout env/production",
    "version:create": "./enhanced-version-manager.sh version-tag",
    "version:auto-enable": "echo 'AUTO_VERSIONING=true' >> .verssai-safety-config",
    "version:auto-disable": "sed -i 's/AUTO_VERSIONING=true/AUTO_VERSIONING=false/' .verssai-safety-config",
    "github:push-all": "npm run github:push-branches && npm run github:push-tags",
    "github:push-branches": "git push origin --all",
    "github:push-tags": "git push origin --tags",
    "github:setup-environments": "npm run github:create-dev && npm run github:create-staging && npm run github:create-prod",
    "github:create-dev": "git checkout -b env/development 2>/dev/null || git checkout env/development; git push -u origin env/development",
    "github:create-staging": "git checkout -b env/staging 2>/dev/null || git checkout env/staging; git push -u origin env/staging",
    "github:create-prod": "git checkout -b env/production 2>/dev/null || git checkout env/production; git push -u origin env/production",
    "github:sync": "git fetch origin && git remote prune origin",
    "emergency:rollback": "./enhanced-version-manager.sh emergency-rollback",
    "emergency:backup": "./enhanced-version-manager.sh backup emergency-$(date +%Y%m%d-%H%M%S)",
    "emergency:status": "npm run safety:status && npm run backup:auto-status && git status",
    "emergency:reset": "git reset --hard HEAD~1 && npm run emergency:backup",
    "test:safety": "npm run test:backup && npm run test:environments && npm run test:versioning",
    "test:backup": "./enhanced-version-manager.sh backup test-backup && echo 'Backup test completed'",
    "test:environments": "npm run safety:env-status",
    "test:versioning": "./enhanced-version-manager.sh version-tag test",
    "test:all": "npm run frontend:test && npm run backend:test && npm run test:safety",
    "cleanup:backups": "find ./backups -name '*.tar.gz' -mtime +7 -delete 2>/dev/null || true",
    "cleanup:branches": "git branch --merged | grep -v '\\*\\|main\\|develop\\|env/' | xargs -n 1 git branch -d 2>/dev/null || true",
    "cleanup:logs": "find . -name '*.log' -mtime +3 -delete 2>/dev/null || true",
    "cleanup:all": "npm run cleanup:backups && npm run cleanup:branches && npm run cleanup:logs",
    "monitor:start": "npm run backup:auto-start && echo 'Development monitoring started'",
    "monitor:stop": "npm run backup:auto-stop && echo 'Development monitoring stopped'",
    "monitor:restart": "npm run backup:auto-restart && echo 'Development monitoring restarted'",
    "monitor:status": "npm run safety:status && npm run backup:auto-status",
    "setup:complete": "npm run install:all && npm run safety:init && npm run github:setup-environments && npm run backup:auto-start",
    "setup:dev-env": "npm run install:all && npm run safety:init && npm run docker:up",
    "setup:production": "npm run install:all && npm run build && npm run safety:init",
    "install:all": "npm install && npm run frontend:install && npm run backend:build",
    "install:hooks": "./enhanced-version-manager.sh init && echo 'Git hooks installed'",
    "install:safety": "chmod +x *.sh && npm run safety:init",
    "daily:start": "npm run safety:status && npm run backup:auto-start && npm run dev",
    "daily:end": "npm run backup:create daily-end-$(date +%Y%m%d) && npm run safety:status",
    "daily:summary": "npm run safety:status && git log --oneline --since='1 day ago'",
    "deploy:staging": "npm run backup:create pre-staging-deploy && npm run build && npm run safe:deploy staging",
    "deploy:production": "npm run backup:create pre-production-deploy && npm run build && npm run test:all && npm run safe:deploy production",
    "deploy:rollback": "npm run emergency:rollback",
    "quick:commit": "npm run safe:commit",
    "quick:backup": "npm run backup:create quick-$(date +%H%M%S)",
    "quick:status": "npm run safety:status && git status --short",
    "quick:push": "git push origin $(git branch --show-current)",
    "quick:pull": "git pull origin $(git branch --show-current)",
    "health:check": "npm run safety:status && npm run docker:ps && npm run test:safety",
    "health:full": "npm run health:check && npm run backup:auto-status && git log --oneline -5",
    "health:services": "curl -f http://localhost:8080/health && curl -f http://localhost:3000",
    "logs:backend": "tail -f backend.log",
    "logs:frontend": "tail -f frontend.log",
    "logs:safety": "tail -f auto-version.log",
    "logs:all": "tail -f *.log",
    "feature:new": "npm run safe:feature",
    "feature:finish": "git checkout develop && git merge --no-ff $(git branch --show-current) && git branch -d $(git branch --show-current)",
    "feature:list": "git branch | grep feature/",
    "release:prepare": "npm run backup:create pre-release && npm run test:all && npm run build",
    "release:staging": "npm run release:prepare && npm run deploy:staging",
    "release:production": "npm run release:prepare && npm run deploy:production",
    "verssai:start": "npm run setup:dev-env && npm run dev",
    "verssai:stop": "npm run monitor:stop && docker-compose down",
    "verssai:status": "npm run health:full",
    "verssai:reset": "npm run cleanup:all && npm run setup:complete"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "nodemon": "^3.1.10"
  },
  "keywords": [
    "verssai",
    "venture-capital",
    "ai-platform",
    "development-safety",
    "version-control",
    "backup-system",
    "fastapi",
    "react",
    "typescript"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/MiraclesGIT/VERSSAI-engineAug10.git"
  },
  "author": "VERSSAI Development Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0",
    "python": ">=3.9.0"
  },
  "config": {
    "autoBackupInterval": 15,
    "maxBackups": 96,
    "safetyChecks": true,
    "githubAutoPush": true,
    "environments": [
      "development",
      "staging",
      "production"
    ]
  }
}
